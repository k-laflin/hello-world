version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
      
commands:
  destroy-environment:
    steps:
      - run: 
          name: Destory environment
          command: |
            aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID}
          when: on_fail

jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run: |
              aws cloudformation deploy --stack-name prod-${CIRCLE_WORKFLOW_ID} --template-file prep_files/template.yml \
               --parameter-overrides NAME="${CIRCLE_WORKFLOW_ID}" \
               --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"
  
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "3d:5c:4d:8e:b3:73:25:cc:5b:1b:d6:74:af:50:0b:d9"
      - run: 
          name: install ansible
          command: apk add --update ansible
      - run:
          name: run playbook
          command: ansible-playbook -i ansible/inventory ansible/main-remote.yml

  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: install curl
          command: apk add curl
      - run:
          name: smoke test 1
          command: |
                    if curl -s --head "34.217.31.208:3000" 
                    then
                      echo "It worked!"
                    else
                      echo "It failed"
                      exit 1
                    fi 
      - run:
          name: smoke test 2
          command: |
                    if curl -s --head "34.217.31.208:80" 
                    then
                      echo "It worked!"
                    else
                      echo "It failed"
                      exit 1
                    fi 
      - destroy-environment

  create_and_deploy_frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Execute bucket.yml
          command: |
                aws cloudformation deploy \
                --template-file prep_files/bucket.yml \
                --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID} \
                --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID}"
      - run:
          name: add website vs 2 html
          command: |
            aws s3 cp prep_files/index2.html "s3://mybucket-${CIRCLE_WORKFLOW_ID}/index.html"

  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run: 
          name: fetch & save old pipeline ID (bucket name) responsible for latest release
          command: |
              aws cloudformation \
              list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
              --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: execute cloudfront.yml
          command: |
              aws cloudformation deploy \
              --template-file prep_files/cloudfront.yml \
              --stack-name production-distro \
              --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID}"

  clean_up_old_frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run: 
          name: destroy previous prod S3 bucket and CloudFormation stack
          command: |
              export OldBucketID=$(cat ~/textfile.txt)
              aws s3 rm "s3://${OldBucketID}" --recursive
              aws s3api delete-bucket --bucket ${OldBucketID}

workflows:
  say-hello-workflow:
    jobs:
      - create_and_deploy_frontend
      - get_last_deployment_id:
          requires: [create_and_deploy_frontend]
      - promote_to_production:
          requires: [get_last_deployment_id]
      - clean_up_old_frontend:
          requires: [promote_to_production]
      #- create_infrastructure
      #- configure_infrastructure
         #requires: [create_infrastructure]
      #- smoke_test:
      #    requires: [configure_infrastructure]
      #- smoke_test_failure:
         # requires: [create_infrastructure]
